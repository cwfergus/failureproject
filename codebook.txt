CodeBook for Failure List Project
Cameron Ferguson
Last updated 3/4/15
----------------------------------------------------------------------------
This CodeBook provides insight into the raw data, the precursor data and how it
is made, and the final data.

THIS CODEBOOK IS UNFINISHED. FOR NOW JUST PRECUSOR FILES ARE DESCRIBED.

------------------------------------------------
Intermediate Data Frames

Below I will describe each data frame present in this functions, and how it is different 
from the previous. If you wish to look at the data, you can write them out to an excel
sheet with the following command:
	test_write_out(dataframename, "outputname.xlsx", "sheetname")
If you give it the same outputname.xlsx and a NEW sheet name it will write new data to the
next sheet. Please be aware, these are LARGE raw files, it can take a minuite or two to 
write out the data.

----

failurelist.R intermediates

rawdata: This is simply the read in raw data. It contains NO column names, until I add
	them, via the colnames function. Each sequence, or Observation, is in its own row,
	and each Variable (ie Sequence ID, failure Reason, etc) is in its own column.

raw_tbl_df: This is the raw data, w/ col names, in a special format. Format enables special
 	printing as well as cool functions, all enabled by the DPLYR package. 

not_passed: Is a data frame containing only those observations which did had something in
	the Failure Reason variable. So anything that passed without a note, is removed.
	This file is further cleaned up with the clean_up() function, which removes blank
	space, and changes all failure reasons to lower case. 

	example write out: test_write_out(not_passed, "intermediatedata.xlsx", "not_passed")

only_failed: A data frame containing only those observations that are not removed by the
	not_failed() function. This function removes things based on specific character 
	matching. The following character groups are removed, and are not present in this
	file: (example notes are next to the items)
		1) see
		2) material
		3) collection
		4) stellaris o
		5) pass
		6) wobble o
		7) wobbles o
		8) recheck
		9) relot
		10) re-lot
		11) comb
	While I cannot be 100% certain, most of these words or parts of words only occur
	in non-failed sequencs. So by removing any that have these words, we remove any 
	not failed sequences. 

clean_failure_reassign_msokay: A data frame containing only_failed sequences whose Failure
	Reasons have been aggreagated if possible, via the failure_aggregation() function.
	This function searchs for specific phrases, and changes the Failure Note to an
	identical note. 
		IE) If two sequences were both failed for poor purity, but one had a 
		Failure Reason of "poor purity" and the other said "did not meet purity"
		They would both be changed to Poor Purity.
	Its important to note that order is extrememly important in this function, due to the
	way character recognition works. R WILL find the word purity WITHIN impurity. So
	impurity notes, must be removed prior to purity notes, assuming nothing else is 
	written in the note. 
	This file should get better as we begin to standardize failure notes. This file also
	contains Reassigns and Ms Okays, which are technically not failed, but are important
	to know the difference

clean_failure_msokay: A data frame that is essentially the same as the one above, but all
	Reassign notes have been removed by the reason_remover function.

clean_failure: A data frame that is eseentially the same as the one above, but all the
	Ms Okay notes have been removed by reason_remover

Failurelist_by_Reason: This is the Final data frame for the Top Failure Reasons sheet. It
	contains the clean_failure data frame, grouped by failure reasons, which have then
	been counted. This data frame only has two columns, Failure Reason, and the 
	Number_of_failures column. 

----
summary.R intermediates

summary: a data frame created by data_summary() function. This function is manually made,
	and just is used to report summary information. See the function for how it works.
	It reports amount variables, that are generated by counting the number of rows found
	in one of the failurelist.R intermediates.

---
seqID_Analyze.R intermediates

seqID_counts: a data frame that contains every unique sequence ID in the raw file, and the 
	number of times it was made.

seqID_failure_counts: a data frame that contains every unique sequence ID in the clean_failure
	intermediate, and the number of times it appears (ie the number of times it failed)

seqID_mods: a data frame that contains every unique sequence ID in the raw file and its Mods

seqID_FR_raw: contains a data frame with each unique sequence ID, the number of times they
	wer made, and the number of times they were failed.

seqID_FR_raw_Mods: contains a data frame that is the same as the one above, but has the 
	sequence ID's mods

seqID_FR_Mods: contains the same as above, but also a column that is the failure rate: ie
	it is the number_of_failures/times_made. Then it is arranged by failure_rate, the
	columns are reordered, and then any seqIDs with a failure rate of 1 are removed
		These 100% failure rates are dues to miscellanous non-failure notes, which
		result in them being reported as failed by this script as well as the wobble
		note that Jared has been using for the past year, which makes it impossible
		to remove those Passes. 

seqID_FR_2percent: is simply a number, representing the 2% cut off of failure rate

seqID_FR_top2percent: is only the seqID_FR_mods observations whose failure rate are above
	the seqID_FR_2percent number. This is the data frame that is written to the excel
	file.








